// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: siox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "siox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {

namespace {

const ::google::protobuf::Descriptor* MessageBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageBuffer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageBuffer_Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_siox_2eproto() {
  protobuf_AddDesc_siox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "siox.proto");
  GOOGLE_CHECK(file != NULL);
  MessageBuffer_descriptor_ = file->message_type(0);
  static const int MessageBuffer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, msg_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, msg_data_),
  };
  MessageBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageBuffer_descriptor_,
      MessageBuffer::default_instance_,
      MessageBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageBuffer));
  MessageBuffer_Action_descriptor_ = MessageBuffer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_siox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageBuffer_descriptor_, &MessageBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_siox_2eproto() {
  delete MessageBuffer::default_instance_;
  delete MessageBuffer_reflection_;
}

void protobuf_AddDesc_siox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nsiox.proto\022\007buffers\"\300\001\n\rMessageBuffer\022"
    "6\n\006action\030\001 \002(\0162\035.buffers.MessageBuffer."
    "Action:\007Message\022\014\n\004type\030\002 \002(\r\022\020\n\010priorit"
    "y\030\003 \001(\r\022\020\n\010msg_size\030\004 \001(\004\022\020\n\010msg_data\030\005 "
    "\001(\014\"3\n\006Action\022\r\n\tAdvertise\020\000\022\r\n\tSubscrib"
    "e\020\001\022\013\n\007Message\020\002", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "siox.proto", &protobuf_RegisterTypes);
  MessageBuffer::default_instance_ = new MessageBuffer();
  MessageBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_siox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_siox_2eproto {
  StaticDescriptorInitializer_siox_2eproto() {
    protobuf_AddDesc_siox_2eproto();
  }
} static_descriptor_initializer_siox_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageBuffer_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageBuffer_Action_descriptor_;
}
bool MessageBuffer_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageBuffer_Action MessageBuffer::Advertise;
const MessageBuffer_Action MessageBuffer::Subscribe;
const MessageBuffer_Action MessageBuffer::Message;
const MessageBuffer_Action MessageBuffer::Action_MIN;
const MessageBuffer_Action MessageBuffer::Action_MAX;
const int MessageBuffer::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageBuffer::kActionFieldNumber;
const int MessageBuffer::kTypeFieldNumber;
const int MessageBuffer::kPriorityFieldNumber;
const int MessageBuffer::kMsgSizeFieldNumber;
const int MessageBuffer::kMsgDataFieldNumber;
#endif  // !_MSC_VER

MessageBuffer::MessageBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageBuffer::InitAsDefaultInstance() {
}

MessageBuffer::MessageBuffer(const MessageBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageBuffer::SharedCtor() {
  _cached_size_ = 0;
  action_ = 2;
  type_ = 0u;
  priority_ = 0u;
  msg_size_ = GOOGLE_ULONGLONG(0);
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageBuffer::~MessageBuffer() {
  SharedDtor();
}

void MessageBuffer::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void MessageBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageBuffer_descriptor_;
}

const MessageBuffer& MessageBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_siox_2eproto();
  return *default_instance_;
}

MessageBuffer* MessageBuffer::default_instance_ = NULL;

MessageBuffer* MessageBuffer::New() const {
  return new MessageBuffer;
}

void MessageBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 2;
    type_ = 0u;
    priority_ = 0u;
    msg_size_ = GOOGLE_ULONGLONG(0);
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .buffers.MessageBuffer.Action action = 1 [default = Message];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::MessageBuffer_Action_IsValid(value)) {
            set_action(static_cast< ::buffers::MessageBuffer_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msg_size;
        break;
      }

      // optional uint64 msg_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .buffers.MessageBuffer.Action action = 1 [default = Message];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->priority(), output);
  }

  // optional uint64 msg_size = 4;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_size(), output);
  }

  // optional bytes msg_data = 5;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->msg_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .buffers.MessageBuffer.Action action = 1 [default = Message];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->priority(), target);
  }

  // optional uint64 msg_size = 4;
  if (has_msg_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msg_size(), target);
  }

  // optional bytes msg_data = 5;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .buffers.MessageBuffer.Action action = 1 [default = Message];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint64 msg_size = 4;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_size());
    }

    // optional bytes msg_data = 5;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageBuffer::MergeFrom(const MessageBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBuffer::CopyFrom(const MessageBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageBuffer::Swap(MessageBuffer* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(type_, other->type_);
    std::swap(priority_, other->priority_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageBuffer_descriptor_;
  metadata.reflection = MessageBuffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buffers

// @@protoc_insertion_point(global_scope)
