/**
@page Statistics Statistics

This document describes, what Statistics in SIOX are, and how they are collected, forwarded and consumed.

A Statistic is any software or hardware metric that is expected to constantly change value.
Typical examples are processor load, memory utilization, and the total amount of data sent/recieved over a specific network interface.

In the code, @ref monitoring::Statistic "Statistic" is a class that not only contains the last value of its metric,
but also historic information about the last 100 minutes.
These are recorded in a cascade of intervals, each interval serving as the basis to compute the aggregated values on the next level.
This significantly reduces the amout of data that needs to be stored (from 60000 values down to 50).
Code that needs statistics information will want to retrieve the @ref monitoring::Statistics "Statistic" objects that it is interested in,
and then talk to that object to obtain the information the user code needs.



@section Statistics_Structure Code Structure

Apart from the class @ref monitoring::Statistic "Statistic", the following four SIOX components are involved in the handling of statistics information:
The @ref monitoring::StatisticsProviderPlugin "StatisticsProviderPlugin", the @ref monitoring::StatisticsCollector "StatisticsCollector", the @ref monitoring::StatisticsMultiplexer "StatisticsMultiplexer", and the @ref monitoring::StatisticsMultiplexerPlugin "StatisticsMultiplexerPlugin".

@dot
digraph StatisticsComponents {
	node [shape=Mrecord];
	edge [style=solid];

	provider [label="StatisticsProviderPlugin"]
	collector [label="StatisticsCollector"]
	multiplexer [label="StatisticsMultiplexer"]
	listener [label="StatisticsMultiplexerPlugin"]
	statistic [label="Statistic"]

	provider -> collector [label="register"]
	collector -> provider [label="polls"]
	collector -> multiplexer [label="notify"]
	collector -> statistic [label="builds"]
	multiplexer -> listener [label="notify"]
	multiplexer -> statistic [label="forwards"]
	listener -> multiplexer [label="register"]
	listener -> statistic [label="interprets"]
}
@enddot



@subsection Statistics_Provider StatisticsProviderPlugin

Statistics provider plugins have the job of actually querrying the system for the different metrics.
They do this whenever @ref monitoring::StatisticsProviderPlugin::nextTimestep() "nextTimestep()" is called by the statistics collector.
The metrics are made accessible via the @ref monitoring::StatisticsProviderPlugin::availableMetrics() "availableMetrics()" method,
which returns a vector of @ref monitoring::StatisticsProviderDatatypes "StatisticsProviderDatatypes".
Each @ref monitoring::StatisticsProviderDatatypes "StatisticsProviderDatatypes" contains a reference to the variable that the statistics provider updates each time nextTimestep() is called.

The statistics provider plugins are the only components which do not work with @ref monitoring::Statistic "Statistic" objects.



@subsection Statistics_Collector StatisticsCollector

Currently, there is only one implementation of a statistics collector, the ThreadedStatisticsCollector.
Its job is to keep track of registered statistics provider plugins and the metrics they provide,
and to call their @ref monitoring::StatisticsProviderPlugin::nextTimestep() "nextTimestep()" method every 100 ms.
After polling all registered plugins and updating the histories in the @ref monitoring::Statistic "Statistic" objects,
the statistics collector notifies the @ref monitoring::StatisticsMultiplexer "StatisticsMultiplexer" that new data is available.
Also, whenever the set of available statistics changes (because a provider plugin was [un]registered),
the @ref monitoring::StatisticsMultiplexer "StatisticsMultiplexer" is informed by a call to @ref monitoring::StatisticsMultiplexer::notifyAvailableStatisticsChange() "notifyAvailableStatisticsChange".

With the ThreadedStatisticsCollector,
all calls to @ref @ref monitoring::StatisticsProviderPlugin::nextTimestep() "nextTimestep()" and @ref monitoring::StatisticsMultiplexer::newDataAvailable() "newDataAvailable()"
are executed within a special thread spawned within the ThreadedStatisticsCollector.



@subsection Statistics_Multiplexer StatisticsMultiplexer

The @ref monitoring::StatisticsMultiplexer "StatisticsMultiplexer" has the job of forwarding calls to @ref monitoring::StatisticsMultiplexer::newDataAvailable() "newDataAvailable()" and @ref monitoring::StatisticsMultiplexer::notifyAvailableStatisticsChange() "notifyAvailableStatisticsChange" to all @ref monitoring::StatisticsMultiplexerListener "StatisticsMultiplexerListener"s (a base class of @ref monitoring::StatisticsMultiplexerPlugin "StatisticsMultiplexerPlugin") registered with it.



@subsection Statistics_Listener StatisticsMultiplexerPlugin

@ref monitoring::StatisticsMultiplexerPlugin "StatisticsMultiplexerPlugin"s implement the @ref monitoring::StatisticsMultiplexerListener "StatisticsMultiplexerListener" interface to be informed whenever new statistics data becomes available.
They recieve a vector of pointers to @ref monitoring::Statistic "Statistic" objects, which they can use for whatever purposes they please.

*/
