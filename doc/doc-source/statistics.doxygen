/**
@page Statistics Statistics

This document describes, what Statistics in SIOX are, and how they are collected, forwarded and consumed.

A Statistic is any software or hardware metric that is expected to constantly change value.
Typical examples are processor load, memory utilization, and the total amount of data sent/recieved over a specific network interface.

In the code, monitoring::Statistic is a class that not only contains the last value of its metric,
but also historic information about the last 100 minutes.
These are recorded in a cascade of intervals, each interval serving as the basis to compute the aggregated values on the next level.
This significantly reduces the amout of data that needs to be stored (from 60000 values down to 50).
Code that needs statistics information will want to retrieve the monitoring::Statistics objects that it is interested in,
and then talk to that object to obtain the information the user code needs.

@section Statistics_Structure Code Structure
Apart from the class monitoring::Statistic, the following four SIOX components are involved in the handling of statistics information:
The monitoring::StatisticsProviderPlugin, the monitoring::StatisticsCollector, the monitoring::StatisticsMultiplexer, and the monitoring::StatisticsMultiplexerPlugin.

@dot
digraph StatisticsComponents {
	node [shape=Mrecord];
	edge [style=solid];

	provider [label="StatisticsProviderPlugin"]
	collector [label="StatisticsCollector"]
	multiplexer [label="StatisticsMultiplexer"]
	listener [label="StatisticsMultiplexerPlugin"]
	statistic [label="Statistic"]

	provider -> collector [label="register"]
	collector -> provider [label="polls"]
	collector -> multiplexer [label="notify"]
	collector -> statistic [label="builds"]
	multiplexer -> listener [label="notify"]
	multiplexer -> statistic [label="forwards"]
	listener -> multiplexer [label="register"]
	listener -> statistic [label="interprets"]
}
@enddot

@subsection Statistics_Provider StatisticsProviderPlugin

*/
