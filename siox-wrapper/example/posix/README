Example for instrumentation

About instrumentation

Any function available in the "blank" header file (generated by siox-wrapper 
with the -b option) can be instrumented. This is done by adding a one-line
comment before the function definition, followed by the name of the function to
use (matching the template) and its parameters separated by spaces
(for example "// function_name para1 para2").
Some general rules apply here. First of all, the order of the commands is
maintained. So you can rely on variables you defined before. Another important 
feature is quoting, you can have spaces in single parameters if you quote them.
If more parameters than expected are given, any spare ones
are assigned to the last parameter (with the spaces between them). 
Lastly, comments which are not to be parsed can be added with /* Comment */.

Example

low-level-io.h's open function as an example

/* Set the interface name for the library */
//interface_name "POSIX"

/* Register the data types for the descriptors */
//register_datatype "FileName" SIOX_STORAGE_STRING dtid_FileName

//register_datatype "FileHandle" SIOX_STORAGE_64_BIT_INTEGER dtid_FileHandle

/* Register the metrics to grab the performance data */
//register_metric "Bytes written." "Count of bytes written to file."
//SIOX_UNIT_BYTES SIOX_STORAGE_64_BIT_INTEGER SIOX_SCOPE_SUM mid_bytes_written

//register_metric "Bytes read." "Count of bytes read from file"
//SIOX_UNIT_BYTES SIOX_STORAGE_64_BIT_INTEGER SIOX_SCOPE_SUM mid_bytes_read

/* Register the descriptor mapping from a file name to a file handle */
//register_descriptor_map dtid_FileName dtid_FileHandle dmid_open

/* Receive the file name descriptor and map it to the file handle descriptor */
//receive_descriptor dtid_FileName "FileName"
//map_descriptor dmid_open "FileName" "FileHandle"
int open(const char *pathname, int flags, ...);
