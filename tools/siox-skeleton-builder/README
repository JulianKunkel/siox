This directory contains:
	* siox-skeleton-builder.py - to build for an arbitrary C-interface a wrapper using dlsym or ld's wrap
	* stubs which implement siox-ll for testing purpose
	* layers - contains header files of relevant interfaces which use the skeleton-builder to provide an instremented version.
	* test - contains tests for the siox-skeleton-builder.py (for specific tests of layers etc. see subdirectories in the respective folder)

Creation of siox-ll implementation for testing in the folder stubs
	It will read the globally installed siox-ll.h and use the provided annotations to create a printf and list 
	implementation which will print the invoked function names and parameters.
	A testcase is provided.

	Run ./waf configure install


siox-wrapper

Prerequisites for tests
1) install all header files from include/ to /usr/local/include
   This can be achieved by running ./waf install in the top directory.


Description

One problem with tracing foreign code is keeping up to date with it. Updating an instrumented library also requires to audit any changes that have been made to it in order to ensure its still working correctly. 
Siox-wrapper tries to ease and minimize this recurring work by automatically instrumenting code based on definitions made once.
With regard to this it introduces a way to define mutable templates, which contain the changes that are applied to the source code. 
To achieve maximum flexibility these templates are split up into different sections where all important parts of source code can be addressed. 
Secondly, optional parameters can be defined for templates. Based on these parameters the templates can be dynamically modified at the time the instrumented file is written.
Which templates are used for a function is specified in a plain header file, just before the function itself, in a comment. Siox-wrapper is able to automatically generate these clean header files for easy usage. 
Based on these definitions siox-wrapper automatically generates a C file that wraps around the instrumented library and can be used without further adaption.


Usage

siox-Wrapper.py [-h] [--output OUTPUTFILE] [--debug] [--blank-header]
                [--cpp] [--cpp-args CPPARGS] [--style {wrap,dllsym,plain}]
                inputFile

    -h
        Print help message
        
    --output/-o OUTPUTFILE
        Specifies the filepath for the outputfile
        
    --debug/-d
        Print debug-messages
        
    --blank-header/-b
        Generate a blank header file (from a c-file) which can be used for annoting the source
        
    --cpp/-c
        Wether to call cpp before parsing or not
        
    --cpp-args/-a CPPARGS
        The command line arguements passed to cpp
        
    --style/-s {wrap,dllsym,plain}
        Defines the output format. "wrap" will use gcc-style wrapping, "dllsym" will use a custom method, "plain" will use pintf stubs and omit the actual call
        
    inputFile
        The filepath of the inputfile. This is required


Examples

Generate a clean header-file
    python siox-wrapper.py --blank-header --output out.h --cpp input.c
    
Annotate a file
    // @init
    // @func1 param1 param2    
    // @func2 param1 param2 param3 param3 param3 param3
    void testfunction(int a);
    
    In the above example the function "testfunction" will be wrapped with what the template designates for func1 and func2 in the "before"- and "after"-sections, and what _every single_ init-section says.
    
Generate an instrumented c-file from an annotated header-file (generated before and then annotated)
    python siox-wrapper.py --style wrap --output out.c out.h
