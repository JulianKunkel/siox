#!/usr/bin/env python
# encoding: utf-8

def options(opt):
	opt.load('compiler_c')

def configure(conf):
	conf.load('compiler_c')

	conf.check_cfg(package='glib-2.0', uselib_store='GLIB',  args=['--cflags', '--libs'], mandatory=True)

	conf.env.LIBDIR = conf.env.PREFIX + "/lib/monitoring/low-level-c/layers/"

def build(bld):
	LAYER="mpi"

        def wrap(task): 
		return wrapper(task, "wrap")

        def dlsym(task): 
		return wrapper(task, "dlsym")

        def wrapper(task, typ): 
                src = task.inputs[0].abspath()
                tgt = task.outputs[0].abspath()
                cmd = bld.path.abspath() + '/../../siox-wrapper.py -o %s -t %s -s %s -W %s.wrap %s' % (tgt, bld.path.abspath() + "/../../template.py", typ, LAYER, src)
                return task.exec_command(cmd)

        def dummy(task): 
                cmd = ""
                return task.exec_command(cmd)


	bld(rule=wrap, source="mpi.h", target='siox-' + LAYER + '-wrap.c')
	bld(rule=dlsym, source="mpi.h", target='siox-' + LAYER + '-dlsym.c')
	bld(rule=dummy, source='siox-' + LAYER + '-wrap.c', target = LAYER + ".wrap", install_path = "${LIBDIR}")

	bld.shlib( use = "GLIB" ,  target = 'siox-' + LAYER + '-wrap', source = 'siox-' + LAYER + '-wrap.c' )
	bld.shlib( use = "GLIB" ,  target = 'siox-' + LAYER + '-dlsym', source = 'siox-' + LAYER + '-dlsym.c' )
	

	
	

